{
    "contents" : "#' Find next CAT item\n#' \n#' A function that returns the next item in the computerized adaptive test. \n#' \n#' @param x an object of class 'mirtCAT_design' returned from the \\code{\\link{mirtCAT}} function\n#'   when passing \\code{design_elements = TRUE}\n#'   \n#' @param ... additional arguments to pass\n#' \n#' @seealso \\code{\\link{mirtCAT}}, \\code{\\link{updateDesign}}\n#' @export findNextItem\n#' @author Phil Chalmers \\email{rphilip.chalmers@@gmail.com}     \n#' @return returns a numeric value indicating the index of the next item to be selected\n#' @examples\n#' \\dontrun{\n#' # test defined in mirtCAT help file, first example\n#' CATdesign <- mirtCAT(shiny_questions, mod, item_answers=answers, criteria = 'MI', \n#'    design_elements = TRUE)\n#' \n#' # returns number 1 in this case, since that's the starting item\n#' findNextItem(CATdesign) \n#' \n#' # detemine next item if item 1 and item 10 were answered correctly, and Theta = 0.5\n#' CATdesign <- updateDesign(CATdesign, items = c(1, 10), responses = c(1, 1), Theta = 0.5)\n#' findNextItem(CATdesign) \n#' }\nfindNextItem <- function(x){\n    if(class(x) != 'mirtCAT_design')\n        stop('input is not the correct class')\n    return(findNextCATItem(person=x$person, test=x$test, design=x$design))\n}\n\n#' @rdname findNextItem\n#' @export\nprint.mirtCAT_design <- function(x, ...){ \n   cat('Object of class \\'mirtCAT_design\\'\\n')\n}\n\nfindNextCATItem <- function(person, test, design){\n    \n    #heavy lifty CAT stuff just to find new item\n    criteria <- design$criteria\n    if(all(is.na(person$responses)))\n        return(design$start_item)\n    lastitem <- sum(!is.na(person$items_answered))\n    not_answered <- is.na(person$responses)\n    which_not_answered <- which(not_answered)\n    K <- test$mirt_object@Data$K\n    possible_patterns <- matrix(person$responses, sum(K[not_answered]), \n                                length(not_answered), byrow=TRUE)\n    row <- 1L\n    row_loc <- numeric(nrow(possible_patterns))\n    for(ii in which(not_answered)){\n        resp <- 0L:(K[ii] - 1L)\n        row_loc[row:(row+length(resp)-1L)] <- ii\n        for(j in 1L:length(resp)){\n            possible_patterns[row, ii] <- resp[j]\n            row <- row + 1L   \n        }\n    }\n    method <- design$criteria_estimator\n    #saftey features\n    if(length(unique(na.omit(person$responses))) < 2L) method <- 'MAP'\n    if(sum(!is.na(person$responses)) < 5L) method <- 'MAP'\n    if(design$use_content){\n        tmp <- table(design$content[!is.na(person$responses)])\n        design$content_prop_empirical <- as.numeric(tmp/sum(tmp))\n    }\n    \n    if(criteria == 'seq'){\n        return(as.integer(lastitem + 1L))\n    } else if(criteria == 'random'){\n        if(length(which_not_answered) == 1L) item <- which_not_answered\n        else item <- sample(which_not_answered, 1L)\n        if(design$use_content){\n            dif <- design$content_prop - design$content_prop_empirical\n            tmp <- names(dif)[max(dif) == dif]\n            if(length(tmp) > 1L) tmp <- tmp[sample(1L:length(tmp), 1L)]\n            cpick <- design$content[which_not_answered]\n            if(sum(cpick == tmp) > 1L)\n                item <- sample(which_not_answered[cpick == tmp], 1L)\n            if(sum(cpick == tmp) == 1L)\n                item <- which_not_answered[cpick == tmp]\n            #otherwise 0, item does not change\n        }\n        return(as.integer(item))\n    } else if(criteria == 'KL'){\n        crit <- KL(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                   person=person, test=test, row_loc=row_loc, delta=design$KL_delta)\n        index <- which_not_answered\n    } else if(criteria == 'KLn'){\n            crit <- KL(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                       person=person, test=test, row_loc=row_loc, \n                       delta=design$KL_delta*sqrt(sum(!is.na(person$responses))))\n            index <- which_not_answered\n    } else if(criteria == 'IKL'){\n        crit <- IKL(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                   person=person, test=test, row_loc=row_loc, delta=design$KL_delta)\n        index <- which_not_answered\n    } else if(criteria == 'IKLP'){\n            crit <- IKL(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                        person=person, test=test, row_loc=row_loc, delta=design$KL_delta,\n                        den=TRUE)\n            index <- which_not_answered\n    } else if(criteria == 'IKLn'){\n        crit <- IKL(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                   person=person, test=test, row_loc=row_loc, \n                   delta=design$KL_delta*sqrt(sum(!is.na(person$responses))))\n        index <- which_not_answered\n    } else if(criteria == 'IKLPn'){\n        crit <- IKL(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                    person=person, test=test, row_loc=row_loc, \n                    delta=design$KL_delta*sqrt(sum(!is.na(person$responses))))\n        index <- which_not_answered\n    } else if(criteria == 'MI'){\n        crit <- MI(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                   person=person, test=test, row_loc=row_loc)\n        index <- which_not_answered\n    } else if(criteria == 'MEI'){\n        crit <- MEI(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                    person=person, test=test, row_loc=row_loc)\n        index <- which_not_answered\n    } else if(criteria == 'MEPV'){\n        crit <- -MEPV(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                    person=person, test=test, row_loc=row_loc)\n        index <- which_not_answered\n    } else if(criteria == 'MLWI'){\n        crit <- MLWI(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                     person=person, test=test, row_loc=row_loc)\n        index <- which_not_answered\n    } else if(criteria == 'MPWI'){\n        crit <- MPWI(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                     person=person, test=test, row_loc=row_loc)\n        index <- which_not_answered\n    } else if(criteria == 'Drule' || criteria == 'DPrule'){\n        crit <- -Drule(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                      person=person, test=test, row_loc=row_loc, method=method)\n        index <- row_loc\n    } else if(criteria == 'Erule' || criteria == 'EPrule'){\n        crit <- -Erule(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                      person=person, test=test, row_loc=row_loc, method=method)\n        index <- row_loc\n    } else if(criteria == 'Trule' || criteria == 'TPrule'){\n        crit <- Trule(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                      person=person, test=test, row_loc=row_loc, method=method, design=design)\n        index <- row_loc\n    } else if(criteria == 'Wrule' || criteria == 'WPrule'){\n        crit <- Wrule(which_not_answered=which_not_answered, possible_patterns=possible_patterns,\n                      person=person, test=test, row_loc=row_loc, method=method, design=design)\n        index <- row_loc\n    } else {\n        stop('Selection criteria does not exist')\n    }\n    \n    exposure <- design$exposure[lastitem+1L]    \n    if(design$use_content){\n        dif <- design$content_prop - design$content_prop_empirical\n        tmp <- names(dif)[max(dif) == dif]\n        if(length(tmp) > 1L) tmp <- tmp[sample(1L:length(tmp), 1L)]\n        cpick <- design$content[which_not_answered]\n        pick <- cpick == tmp\n        if(sum(pick) > 0L){            \n            index <- index[pick]\n            crit <- crit[pick]\n            exposure <- min(design$exposure[lastitem+1L], sum(pick))\n        }\n    }\n    if(exposure == 1L){\n        item <- index[which(max(crit) == crit)][1L]\n    } else {\n        rnk <- rank(crit, ties.method = 'random')\n        pick <- which(rnk %in% 1L:exposure)\n        item <- index[sample(pick, 1L)]\n    }\n    return(as.integer(item))\n}",
    "created" : 1411246370924.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1329464078",
    "id" : "19332359",
    "lastKnownWriteTime" : 1412094048,
    "path" : "~/Desktop/Git/mirtCAT/R/findNextCATItem.R",
    "project_path" : "R/findNextCATItem.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}