{
    "contents" : "context('twofactor')\n\ntest_that('multidimensional', {\n    \n    set.seed(1234)\n    nitems <- 40\n    itemnames <- paste0('Item.', 1:nitems)\n    a <- matrix(c(rlnorm(nitems/2, .2, .3), rnorm(nitems/4, 0, .3), numeric(nitems/2), \n                  rnorm(nitems/4, 0, .3), rlnorm(nitems/2, .2, .3)), nitems)\n    d <- matrix(rnorm(nitems))\n    dat <- simdata(a, d, 100, itemtype = 'dich', sigma = matrix(c(1,.5,.5,1),2)) #dummy data\n    colnames(dat) <- itemnames\n    \n    #use population values for model\n    sv <- mirt(dat, 2, pars = 'values')\n    sv$value[sv$name == 'a1'] <- a[,1]\n    sv$value[sv$name == 'a2'] <- a[,2]\n    sv$value[sv$name == 'd'] <- d[,1]\n    sv$value[sv$name == 'COV'] <- 0.5\n    mod2 <- mirt(dat, 2, pars = sv, TOL = NaN)\n    \n    #simple math items\n    shiny_questions <- questions <- vector('list', nitems)\n    names(shiny_questions) <- names(questions) <- itemnames\n    answers <- character(nitems)\n    choices <- vector('list', nitems)\n    spacing <- floor(d - min(d)) + 1 #easier items have more variation in the options\n    \n    for(i in 1:nitems){\n        n1 <- sample(1:50, 1)\n        n2 <- sample(51:100, 1)\n        ans <- n1 + n2\n        questions[[i]] <- paste0(n1, ' + ', n2, ' = ?')\n        answers[i] <- as.character(ans)\n        ch <- ans + sample(c(-5:-1, 1:5) * spacing[i,], 5)\n        ch[sample(1:5, 1)] <- ans\n        choices[[i]] <- as.character(ch)\n    }\n    \n    for(i in 1L:nitems){\n        shiny_questions[[i]] <- radioButtons(inputId = itemnames[i],\n                                             label = questions[[i]],\n                                             choices = choices[[i]])\n    }\n    \n    pat <- generate_pattern(mod2, Theta = c(0, 1), choices = choices, item_answers=answers)\n    expect_true(all(pat == as.character(c(96,60,86,81,120,82,89,97,124,81,80,126,101,131,108,89,\n                                          125,113,121,106,95,71,97,82,109,58,62,141,92,85,105,104,\n                                          120,107,115,111,107,108,119,105))))\n    \n    set.seed(1234)\n    pat2 <- generate_pattern(mod2, Theta = c(0, 1))\n    expect_true(all(pat2 == c(1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,1,1,1,1,0,\n                                 0,0,1,1,1,1,1,1,1,1,0,1)))\n    \n    ## test numeric input\n    res <- mirtCAT(mirt_object=mod2, local_pattern=pat2)\n    expect_equal(as.numeric(res$thetas), c(0.09103849, 0.718113), tolerance = 1e-4)\n    \n    #sequential\n    res <- mirtCAT(shiny_questions, mod2, item_answers=answers, local_pattern=pat)\n    expect_equal(as.numeric(res$thetas), c(0.5529561, 0.7744459), tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[41,]), c(0.3945902, 0.4083016), tolerance = 1e-4)\n    \n    oo <- plot(res)\n    expect_is(oo, 'trellis')\n    oo <- plot(res, pick_theta=1)\n    \n    #adaptive\n    res <- mirtCAT(shiny_questions, mod2, item_answers=answers, local_pattern=pat, criteria='DPrule',\n                   design = list(min_SEM = .5))\n    expect_equal(as.numeric(res$thetas), c(0.3748623, 0.8975062), tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]), \n                 c(0.49504,  0.4959223), tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod2, item_answers=answers, local_pattern=pat, criteria='Drule',\n                   design = list(min_SEM = .5))\n    expect_equal(as.numeric(res$thetas), c(0.2470195, 0.9285525), tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]), \n                 c(0.4969313, 0.4976671), tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod2, item_answers=answers, local_pattern=pat, \n                   design = list(min_SEM = .5), criteria = 'TPrule')\n    expect_equal(as.numeric(res$thetas), c(0.3748623, 0.8975062), tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]), \n                 c(0.49504,  0.4959223), tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod2, item_answers=answers, local_pattern=pat, \n                   design = list(min_SEM = .5), criteria = 'WPrule')\n    expect_equal(as.numeric(res$thetas), c(0.3565503, 0.9837686), tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]), \n                 c(0.4920396, 0.4857099), tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod2, item_answers=answers, local_pattern=pat, \n                   design = list(min_SEM = .5), criteria = 'EPrule')\n    expect_equal(as.numeric(res$thetas), c(0.3449841, 0.9562076), tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]), \n                 c(0.4867828, 0.4995883), tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod2, item_answers=answers, local_pattern=pat, criteria = 'KL')\n    expect_equal(as.numeric(res$thetas), c(0.5529561, 0.7744459), tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]), \n                 c(0.3945902, 0.4083016), tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod2, item_answers=answers, local_pattern=pat, criteria = 'KLn')\n    expect_equal(as.numeric(res$thetas), c(0.5529561, 0.7744459), tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]), \n                 c(0.3945902, 0.4083016), tolerance = 1e-4)\n    \n})\n\n",
    "created" : 1407968151127.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "725885460",
    "id" : "E9684FC7",
    "lastKnownWriteTime" : 1406860988,
    "path" : "~/Desktop/Dropbox/Research-projects/mirtCAT/tests/tests/test-mirtCAT_two.R",
    "project_path" : "tests/tests/test-mirtCAT_two.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}