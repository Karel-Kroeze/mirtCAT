{
    "contents" : "context('onefactor')\n\ntest_that('unidimensional', {\n    \n    set.seed(1234)\n    nitems <- 25\n    itemnames <- paste0('Item.', 1:nitems)\n    a <- matrix(rlnorm(nitems, .2, .3))\n    d <- matrix(rnorm(nitems))\n    dat <- simdata(a, d, 500, itemtype = 'dich')\n    colnames(dat) <- itemnames\n    mod <- mirt(dat, 1, verbose = FALSE, TOL = .01)\n    \n    #simple math items\n    shiny_questions <- questions <- vector('list', nitems)\n    names(shiny_questions) <- names(questions) <- itemnames\n    answers <- character(nitems)\n    choices <- vector('list', nitems)\n    spacing <- floor(d - min(d)) + 1 #easier items have more variation in the options\n    \n    for(i in 1:nitems){\n        n1 <- sample(1:50, 1)\n        n2 <- sample(51:100, 1)\n        ans <- n1 + n2\n        questions[[i]] <- paste0(n1, ' + ', n2, ' = ?')\n        answers[i] <- as.character(ans)\n        ch <- ans + sample(c(-5:-1, 1:5) * spacing[i,], 5)\n        ch[sample(1:5, 1)] <- ans\n        choices[[i]] <- as.character(ch)\n    }\n    \n    for(i in 1L:nitems){\n        shiny_questions[[i]] <- radioButtons(inputId = itemnames[i],\n                                             label = questions[[i]],\n                                             choices = choices[[i]])\n    }\n    \n    pat <- generate_pattern(mod, Theta = 0, choices = choices, item_answers=answers)\n    expect_true(all(pat == as.character(c(67,90,109,118,111,127,118,129,112,97,93,98,77,110,98,\n                             125,112,122,148,136,100,88,83,76,90))))\n    pat2 <- generate_pattern(mod, Theta = -1, choices = choices, item_answers=answers)\n    expect_true(all(pat2 == as.character(c(70,90,101,139,123,107,120,139,122,100,93,97,81,110,\n                                           100,125,106,132,152,136,106,98,87,72,90))))\n    \n    #no scoring, just collecting\n    res <- mirtCAT(shiny_questions, local_pattern=pat)\n    expect_is(res, 'mirtCAT')\n    expect_true(all(res$items_answered == 1:25))\n    \n    res <- mirtCAT(shiny_questions, local_pattern=pat, criteria='random')\n    expect_true(all(!is.na(res$raw_responses)))\n    \n    #sequential\n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat)\n    expect_equal(as.numeric(res$thetas), 0.3588322, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[26,]), 0.3232215, tolerance = 1e-4)\n    \n    oo <- plot(res)\n    expect_is(oo, 'trellis')\n    \n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat,\n                   design = list(max_items = 5))\n    expect_true(sum(!is.na(res$raw_responses)) == 5L && sum(!is.na(res$responses)) == 5L)\n    expect_true(nrow(!is.na(res$thetas_history)) == 6L && nrow(!is.na(res$thetas_SE_history)) == 6L)\n    \n    #adaptive\n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, criteria='MI',\n                   design = list(min_SEM = .4))\n    expect_equal(as.numeric(res$thetas), 0.3708466, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[11L,]), 0.3930376, tolerance = 1e-4)\n    expect_true(sum(!is.na(res$raw_responses)) == 10L && sum(!is.na(res$responses)) == 10L)\n    expect_true(nrow(!is.na(res$thetas_history)) == 11L && nrow(!is.na(res$thetas_SE_history)) == 11L)\n    \n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, criteria='MI',\n                   design = list(min_SEM = .4), method = 'EAP')\n    expect_equal(as.numeric(res$thetas), 0.2896889, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]),\n                 0.3975697, tolerance = 1e-4)\n    \n    exposure <- rep(3L, length(shiny_questions))\n    set.seed(1234)\n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, criteria='MI',\n                   design = list(min_SEM = .4), method = 'EAP', exposure=exposure,\n                   start_item=sample(c(1:length(shiny_questions)), 1))\n    expect_equal(as.numeric(res$thetas), 0.6289133, tolerance = 1e-4)\n    so <- summary(res)\n    expect_equal(as.numeric(so$thetas_SE_history[nrow(so$thetas_SE_history),]),\n                 0.3921753, tolerance = 1e-4)\n    \n    set.seed(12)\n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, \n                   design = list(min_SEM = .4), method = 'EAP', criteria='random')\n    expect_equal(as.numeric(res$thetas), 0.02426384, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]),\n                 0.398455, tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, \n                   design = list(min_SEM = .4), method = 'EAP', criteria='MEI')\n    expect_equal(as.numeric(res$thetas), 0.1963373, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]),\n                 0.3991926, tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, \n                   design = list(min_SEM = .4), method = 'EAP', criteria='MEPV')\n    expect_equal(as.numeric(res$thetas), 0.1795497, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]),\n                 0.3994549, tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, \n                   design = list(min_SEM = .4), method = 'EAP', criteria='MLWI')\n    expect_equal(as.numeric(res$thetas), 0.2896889, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]),\n                 0.3975697, tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, \n                   design = list(min_SEM = .4), method = 'EAP', criteria='MPWI')\n    expect_equal(as.numeric(res$thetas), 0.2896889, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]),\n                 0.3975697, tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, \n                   design = list(min_SEM = .4), method = 'EAP', criteria='KL')\n    expect_equal(as.numeric(res$thetas), 0.2896889, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]),\n                 0.3975697, tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, \n                   design = list(min_SEM = .4), method = 'ML', criteria='KLn',\n                   preCAT = list(nitems = 5L, criteria = 'seq'))\n    expect_equal(as.numeric(res$thetas), 0.188614, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]),\n                 0.3966434, tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, criteria='IKL',\n                   design = list(min_SEM = .4), method = 'MAP')\n    expect_equal(as.numeric(res$thetas), 0.1017891, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]),\n                 0.3974447, tolerance = 1e-4)\n    \n    res <- mirtCAT(shiny_questions, mod, item_answers=answers, local_pattern=pat, criteria='IKLPn',\n                   design = list(min_SEM = .4), method = 'MAP')\n    expect_equal(as.numeric(res$thetas), 0.1017891, tolerance = 1e-4)\n    expect_equal(as.numeric(res$thetas_SE_history[nrow(res$thetas_SE_history),]),\n                 0.3974447, tolerance = 1e-4)\n})\n\n",
    "created" : 1407968110209.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1075911889",
    "id" : "416461FC",
    "lastKnownWriteTime" : 1406914737,
    "path" : "~/Desktop/Dropbox/Research-projects/mirtCAT/tests/tests/test-mirtCAT_one.R",
    "project_path" : "tests/tests/test-mirtCAT_one.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}